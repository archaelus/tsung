#!/bin/bash

UNAME=`uname`
case $UNAME in
        "Linux") HOST=`hostname -s`;;
        "SunOS") HOST=`hostname`;;
        *) HOST=`hostname -s`;;
esac

INSTALL_DIR=@prefix@/lib/erlang/
ERL=@ERL@
MAIN_DIR=$HOME/.idx-tsunami
LOG_DIR=$MAIN_DIR/log
LOG_OPT="log_file \"$LOG_DIR/idx-tsunami.log\""
VERSION=@PACKAGE_VERSION@

LISTEN_PORT=8090
NAME=idx-tsunami
CONTROLLER=tsunami_controller
RECORDER=tsunami_recorder

TSUNAMIPATH=$INSTALL_DIR/lib/tsunami-$VERSION/ebin
CONTROLLERPATH=$INSTALL_DIR/lib/tsunami_controller-$VERSION/ebin
RECORDERPATH=$INSTALL_DIR/lib/tsunami_recorder-$VERSION/ebin

CONF_OPT_FILE="$HOME/.idx-tsunami/idx-tsunami.xml"
BOOT_OPT="-boot $INSTALL_DIR/lib/tsunami_controller-$VERSION/priv/tsunami_controller -boot_var TSUNAMIPATH  $INSTALL_DIR "
REC_BOOT_OPT="-boot $INSTALL_DIR/lib/tsunami_recorder-$VERSION/priv/tsunami_recorder -boot_var TSUNAMIPATH  $INSTALL_DIR "
REC_DEBUG_LEVEL=5
ERL_RSH=" -rsh ssh "
ERL_OPTS=" +A 1 @ERL_OPTS@ "
COOKIE='tsunami'
ERTS_RUN=`$ERL -version 2>&1 | tr -d '[A-Za-z] (),\f\n\r'`
ERTS_BOOT=`grep erts $TSUNAMIPATH/../priv/tsunami.rel | tr -d 'a-z{}"" ,\n'`

stop() {
    $ERL $ERL_OPTS $ERL_RSH -noshell  -sname killer -setcookie $COOKIE -pa $TSUNAMIPATH -pa $CONTROLLERPATH -s tsunami_controller stop_all $HOST -s init stop
}

stop_recorder() {
    $ERL $ERL_OPTS $ERL_RSH -noshell  -sname killer -setcookie $COOKIE -pa $TSUNAMIPATH -pa $RECORDERPATH -s tsunami_recorder stop_all $HOST -s init stop
}

checkversion() {
	if [ $ERTS_RUN != $ERTS_BOOT ]
    then
		echo "Erlang version has changed ! [$ERTS_BOOT] != [$ERTS_RUN]"
		echo "Must create new boot files (you may have to run this once as root ! )"
		makebootfiles
	fi
}

makebootfiles() {
    cd $TSUNAMIPATH/..
    echo "creating boot file for tsunami application"
    $ERL $ERL_OPTS -noshell -pa $TSUNAMIPATH -s builder go -s init stop > /dev/null
    cd $CONTROLLERPATH/..
    echo "creating boot file for tsunami_controller application"
    $ERL $ERL_OPTS -noshell -pa $TSUNAMIPATH -s builder go -s init stop > /dev/null
    echo "creating boot file for tsunami_recorder application"
    cd $RECORDERPATH/..
    $ERL $ERL_OPTS -noshell -pa $TSUNAMIPATH -s builder go -s init stop > /dev/null
}

start() {
    echo "Starting IDX-Tsunami"	
    $ERL $ERL_OPTS $ERL_RSH -noshell -sname $CONTROLLER -setcookie $COOKIE  $BOOT_OPT \
    -pa $TSUNAMIPATH -pa $CONTROLLERPATH \
    -tsunami_controller config_file \"$CONF_OPT_FILE\" -tsunami_controller $LOG_OPT
}

recorder() {
    echo "Starting IDX-Tsunami recorder on port $LISTEN_PORT"
    $ERL $ERL_OPTS $ERL_RSH -detached -sname $RECORDER -setcookie $COOKIE  $REC_BOOT_OPT \
    -pa $TSUNAMIPATH -pa $RECORDERPATH -pa $CONTROLLERPATH \
    -tsunami_recorder debug_level $REC_DEBUG_LEVEL \
    -tsunami_recorder $LOG_OPT \
    -tsunami_recorder proxy_log_file \"$MAIN_DIR/idx-tsunami_recorder.xml\" \
    -tsunami_recorder proxy_listen_port $LISTEN_PORT
}

debug() {
    $ERL $ERL_OPTS $ERL_RSH -sname $CONTROLLER -setcookie $COOKIE  $BOOT_OPT \
     -pa $TSUNAMIPATH -pa $CONTROLLERPATH \
     -tsunami_controller config_file \"$CONF_OPT_FILE\" \
     -tsunami_controller $LOG_OPT
}

version() {
    echo "IDX-Tsunami version $VERSION" 
}

checkconfig() {
	if [ ! -e $CONF_OPT_FILE ]
	then
		echo "Config file $CONF_OPT_FILE doesn't exist, aborting !"
		exit 1
	fi
}

maindir() {
	if [ ! -d $MAIN_DIR ]
	then
		echo "Creating local tsunami directory $MAIN_DIR"
		mkdir $MAIN_DIR
	fi
}

logdir() {
        if [ ! -d $LOG_DIR ]
        then
                echo "Creating idx-tsunami log directory $LOG_DIR"
                mkdir $LOG_DIR
        fi
}

status() {
    SNAME=tsunami_status_$RANDOM
    $ERL -noshell -sname $SNAME -setcookie $COOKIE -pa $TSUNAMIPATH -pa $CONTROLLERPATH -s tsunami_controller status $HOST -s init stop
}

usage() {
    prog=`basename $1`
    echo "$prog start|stop|restart|debug|status|recorder|stop_recorder|version"
}

while getopts ":f:l:d:r:" Option
do
    case $Option in
        f) CONF_OPT_FILE=$OPTARG;;
        l) LOG_OPT="log_file \"$OPTARG\" ";;
        d) REC_DEBUG_LEVEL=$OPTARG;;
        r) ERL_RSH=" -rsh $OPTARG ";;
        *) usage ;;
    esac
done	
shift $(($OPTIND - 1))

case $1 in
    start)
		checkconfig
		checkversion
        maindir
        logdir
        start
        ;;

    recorder)
		checkversion
        maindir
        logdir
        recorder
        ;;

    boot)
		checkversion
		;;

    debug)
		checkconfig
		checkversion
        maindir
        logdir
        debug
        ;;

    stop)
        stop
        ;;
    stop_recorder)
        stop_recorder
        ;;

    status)
        status
        ;;

    restart)
        stop
        start
        ;;
    version)
        version
        ;;

    *)
        usage $0
        ;;
esac
